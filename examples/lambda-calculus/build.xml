<?xml version="1.0" encoding="UTF-8"?>
<project name="lambda-calculus" default="build" basedir=".">

    <property environment="env" />

    <property name="main-source.dir" value="${basedir}/src/main" />
    <property name="target.dir" value="${basedir}/target" />
    <property name="target.managed.dir" value="${basedir}/target/${ant.project.name}" />
    <property name="target.jar" value="${target.managed.dir}/${ant.project.name}.jar" />

    <property name="test-source.dir" value="${basedir}/src/test" />
    <property name="test-target.txt" value="${target.managed.dir}/${ant.project.name}.txt" />

    <pathconvert property="flix.jar">
        <fileset dir="${env.FLIX_HOME}" includes="**/flix.jar" />
    </pathconvert>

    <target name="-pre-init">
        <available file="${target.managed.dir}/build" type="dir" property="build.present" />
	    <available file="${target.managed.dir}/lib/lib_${ant.project.name}.jar" property="lib.present" />
        <uptodate property="action.notRequired" targetfile="${target.jar}">
            <srcfiles dir="${main-source.dir}" includes="**/*.flix"/>
        </uptodate>
        <uptodate property="test-action.notRequired" targetfile="${test-target.txt}">
            <srcfiles dir="${main-source.dir}" includes="**/*.flix"/>
            <srcfiles dir="${test-source.dir}" includes="**/*.flix"/>
        </uptodate>
    </target>

    <target name="init" depends="-pre-init" unless="${build.present}">
        <mkdir dir="${target.managed.dir}" />
        <java fork="true" jar="${flix.jar}" dir="${target.managed.dir}">
            <arg value="init" />
        </java>
        <delete>
            <fileset dir="${target.managed.dir}/src" includes="**/*.flix"/>
            <fileset dir="${target.managed.dir}/test" includes="**/*.flix"/>
        </delete>
        <copy todir="${target.managed.dir}/src">
            <fileset dir="${main-source.dir}" includes="*.flix" />
        </copy>
    </target>

    <target name="-build-lib" unless="lib.present">
        <pathconvert property="scala.sources" pathsep=" ">
             <fileset dir="${main-source.dir}" includes="**/*.scala" />
        </pathconvert>
        <path id="scalac.classpath">
            <fileset dir="${env.SCALA_HOME}" includes="**/*.jar" />
        </path>
        <path id="classpath">
            <pathelement location="${flix.jar}" />
        </path>
        <condition property="quoted" value="&quot;" else="">
            <contains string="${classpath}" substring=" " />
        </condition>
        <java fork="true" classname="scala.tools.nsc.Main" classpathref="scalac.classpath">
            <jvmarg value="-Xmx768m" />
            <jvmarg value="-Xms768m" />
            <jvmarg value="-Dscala.usejavacp=true" />
            <arg value="-deprecation" />
            <arg value="-feature" />
            <arg value="-d" />
            <arg value="${target.managed.dir}/lib" />
            <arg value="-classpath" />
            <arg value="${quoted}${classpath}${quoted}" />
            <arg line="${scala.sources}" />
        </java>
        <jar destfile="${target.managed.dir}/lib/lib_${ant.project.name}.jar"
            includes="**/*.class"
            basedir="${target.managed.dir}/lib" />
    </target>

    <target name="build" depends="init, -build-lib" unless="${action.notRequired}">
        <java fork="true" jar="${flix.jar}" dir="${target.managed.dir}">
            <arg value="build" />
        </java>
        <java fork="true" jar="${flix.jar}" dir="${target.managed.dir}">
            <arg value="build-jar" />
        </java>
    </target>

    <target name="run" depends="build">
        <java fork="true" jar="${target.jar}" >
            <jvmarg value="-Xbootclasspath/a:${target.managed.dir}/lib/lib_${ant.project.name}.jar" />
            <!-- <arg value="1" /> -->
        </java>
    </target>

    <target name="init-test" depends="init" unless="${test-action.notRequired}">
        <copy todir="${target.managed.dir}/test">
            <fileset dir="${test-source.dir}" includes="**/*.flix" />
        </copy>
    </target>

    <target name="build-test" depends="init-test, build">
        <touch file="${test-target.txt}" />
    </target>

    <target name="test" depends="build-test">
        <java fork="true" jar="${flix.jar}" dir="${target.managed.dir}">
            <arg value="test" />
        </java>
    </target>

    <target name="clean">
        <delete dir="${target.dir}"/>
    </target>

</project>
