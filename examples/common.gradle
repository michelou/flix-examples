// overrides default "build"
buildDir file("target")

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

ext.getNightly = { flixHome ->
    def jars = fileTree(flixHome).filter { it.name.matches("flix-.*\\.jar") }.files
    if (jars.size() > 0) {
        def jarName = jars.last().name
        logger.warn("Nightly build '$jarName' was selected")
        return jarName
    }
    else {
        logger.warn("> WARNING: No nightly build of Flix was found; use release version instead.")
        return "flix.jar"
    }
}

project.ext {
    // sanetize properties from gradle.properties
    scalaLocalInstall = true //hasProperty("scalaLocalInstall") ? scalaLocalInstall.toBoolean() : false

    flixHome = System.getenv("FLIX_HOME")
    logger.info("flixHome = $flixHome")

    jarName = System.getProperty("nightly") != null
        ? getNightly(flixHome)
        : "flix.jar"
    flixJar = file(flixHome + "/" + jarName)

    mainSourceTree = fileTree(dir: "src/main", include: "**/*.flix")
    scalaSourceTree = fileTree(dir: "src/main", include: "**/*.scala")
    //testSourceTree = fileTree(dir: "src/test", include: "**/*.flix")

    buildAppDir = file("${buildDir}/${appName}")

    if (scalaLocalInstall?.toBoolean()) {
        scalaHome = System.getenv("SCALA_HOME")
        logger.info("scalaHome = $scalaHome")

        libraryPath = file(scalaHome + "/lib")
        libraryFiles = files { libraryPath.listFiles() }
        libraryFiles = libraryFiles.filter { File f -> f.name.matches("(.*)\\.jar") }
        toolClasspath = files(libraryFiles)
    } else {
        toolClasspath = files()
    }
    scalaClasspath = files(toolClasspath, sourceSets.main.runtimeClasspath, file("${buildAppDir}/lib"))
}

clean.doLast {
    buildDir.deleteDir()
}

tasks.withType(JavaCompile) {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.CompileOptions.html
    options.deprecation true
    options.encoding "UTF8"
}

task initFlix(type: JavaExec) {
    jvmArgs "-Dfile.encoding=UTF-8"

    mainClass = "-jar"
    args = [ flixJar, "init" ]

    workingDir buildAppDir
}

initFlix.doFirst {
    buildAppDir.mkdirs()
}

initFlix.onlyIf {
    ! buildAppDir.exists()
}

task deleteFiles(type: Delete) {
    dependsOn initFlix

    delete fileTree("${buildAppDir}/src") { include "**/*.flix" }
    delete fileTree("${buildAppDir}/test") { include "**/*.flix" }
}

task copyScala(type: Copy) {
    dependsOn initFlix, deleteFiles

    from("src/main") { include "**/*.scala" }
    into "${buildAppDir}/lib"
}

task copyFlix(type: Copy) {
    dependsOn initFlix, deleteFiles

    from("src/main") { include "**/*.flix" }
    into "${buildAppDir}/src"
}

task compileScala(type: JavaExec) {
    dependsOn copyScala, compileJava

    description "Compile Scala source files"

    classpath = scalaClasspath

    jvmArgs "-Dscala.usejavacp=true"

    mainClass = "scala.tools.nsc.Main"

    String sourceFiles = scalaSourceTree.files.join("\" \"").replaceAll("\\\\", "/")
    args "-deprecation", "-encoding", "UTF8", "-d", "${buildAppDir}/lib", sourceFiles
}

compileScala.onlyIf {
    ! scalaSourceTree.isEmpty()
}

task jarScala(type: Jar) {
    dependsOn compileScala
    
    archiveFileName = "lib_${appName}.jar"
    destinationDirectory = file("${buildAppDir}/lib")
    
    from ("${buildAppDir}/lib") { include "**/*.class" }
}

task compileFlix(type: JavaExec) {
    dependsOn copyFlix, compileJava, jarScala

    description "Compile Flix source files"

    jvmArgs "-Dfile.encoding=UTF-8"

    mainClass = "-jar"
    args = [ flixJar, "build" ]

    workingDir buildAppDir
}

compileFlix.onlyIf {
    ! mainSourceTree.isEmpty()
}

task jarFlix(type: JavaExec) {
    dependsOn compileFlix

    description "Create Flix program \"${appName}/${appName}.jar\""

    jvmArgs "-Dfile.encoding=UTF-8"

    mainClass = "-jar"
    args = [ flixJar, "build-jar" ]

    workingDir buildAppDir
}

build {
    dependsOn jarFlix
}

task run(type: JavaExec) {
    dependsOn build

    description "Execute Flix program \"${appName}/${appName}.jar\""

    jvmArgs "-Dfile.encoding=UTF-8"

    def bootClasspath = fileTree(dir: "${buildAppDir}/lib", include: "**/*.jar").join(File.pathSeparator)

    mainClass = "-Xbootclasspath/a:${bootClasspath}"
    args = [ "-jar", "${buildDir}/${appName}/${appName}.jar" ]

    workingDir buildAppDir
}
